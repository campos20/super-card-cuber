{"version":3,"sources":["functions/wcaUtils.js","functions/timeUtils.js","components/Card.jsx","components/Input.jsx","components/Interface.jsx","App.js","serviceWorker.js","index.js"],"names":["wcaEvents","id","name","spec","getName","event","item","isValidWcaId","wcaId","test","zfill","number","zeroes","length","result","i","timeConverter","wcaEvent","type","DD","Number","substring","TTTTT","MM","solved","hour","Math","floor","min","sec","sec2time","mills","time","out","mills2time","Card","props","medals","records","findResult","competitor","getCompetitorInfo","competition_count","indexOf","total","personal_records","getStatus","toShow","getGeneralItemsFiltered","getTotalItemsToShow","getSpecName","statusEnum","status","this","LOADING","className","role","ERROR","LOADED","competitorInfo","availableWidth","window","innerWidth","cardWidth","cardHeight","competitorNameHeight","avatarHeight","generalItemToShow","itemRowHeight","style","width","height","paddingLeft","paddingRight","person","src","avatar","url","alt","code","country_iso2","map","stat","key","Component","Input","handleCompetitorChange","target","value","toUpperCase","setState","searchCompetitor","toogleSelectedEvent","ev","source","getAttribute","split","toogleToShow","toogleGeneralItem","toogleShowGeneralItem","handleDownload","isToShow","state","types","specs","getMaxItemsToShow","onChange","maxLength","placeholder","data-toggle","data-target","aria-expanded","aria-controls","onClick","disabled","title","display","generalItems","show","colSpan","Fragment","eventSpec","checked","Interface","specId","filter","x","INIT","forEach","CARD_LIMIT_LINE_NUMBER","push","fetchCompetitor","isLoaded","loaded","baseApiUrl","personsEndpoint","fetch","then","res","json","error","console","log","align","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18dc8010.chunk.js","sourcesContent":["export const wcaEvents = [\n  {\n    id: \"333\",\n    name: \"3x3x3 Cube\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"222\",\n    name: \"2x2x2 Cube\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"444\",\n    name: \"4x4x4 Cube\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"555\",\n    name: \"5x5x5 Cube\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"666\",\n    name: \"6x6x6 Cube\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"777\",\n    name: \"7x7x7 Cube\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"333bf\",\n    name: \"3x3x3 Blindfolded\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"333fm\",\n    name: \"3x3x3 Fewest Moves\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"333oh\",\n    name: \"3x3x3 One-Handed\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"333ft\",\n    name: \"3x3x3 With Feet\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"clock\",\n    name: \"Clock\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"minx\",\n    name: \"Megaminx\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"pyram\",\n    name: \"Pyraminx\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"skewb\",\n    name: \"Skewb\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"sq1\",\n    name: \"Square-1\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"444bf\",\n    name: \"4x4x4 Blindfolded\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"555bf\",\n    name: \"5x5x5 Blindfolded\",\n    spec: [\"single\", \"average\"]\n  },\n  {\n    id: \"333mbf\",\n    name: \"3x3x3 Multi-Blind\",\n    spec: [\"single\"]\n  }\n];\n\nexport function getName(event) {\n  for (var item in wcaEvents) {\n    if (wcaEvents[item].id === event) {\n      return wcaEvents[item].name;\n    }\n  }\n}\n\nexport function isWcaEvent(event) {\n  for (var item in wcaEvents) {\n    if (wcaEvents[item].id === event) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isValidWcaId(wcaId) {\n  return /[0-9]{4}[A-Z]{4}[0-9]{2}/.test(wcaId);\n}\n\nexport default { wcaEvents, isWcaEvent, getName, isValidWcaId };\n","let zfill = function(number, zeroes) {\n  let length = (\"\" + number).length;\n  let result = \"\";\n  for (var i = 0; i < zeroes - length; i++) {\n    result += \"0\";\n  }\n  return result + number;\n};\n\nconst mills2time = function(mills) {\n  // We assign \"-\" for empty values\n  if (mills === \"-\") {\n    return mills;\n  }\n\n  // Just in case\n  let time = Number(mills);\n  if (time === -1) {\n    return \"DNF\";\n  }\n\n  let sec = Math.floor(time / 100);\n  time %= 100;\n\n  let min = Math.floor(sec / 60);\n  sec %= 60;\n\n  let hour = Math.floor(min / 60);\n  min %= 60;\n\n  let out = sec + \".\" + zfill(time, 2);\n\n  if (min > 0) {\n    if (sec < 10) {\n      out = min + \":0\" + out;\n    } else {\n      out = min + \":\" + out;\n    }\n  }\n\n  if (hour > 0) {\n    if (min < 10) {\n      out = hour + \":0\" + out;\n    } else {\n      out = hour + \":\" + out;\n    }\n  }\n\n  return out;\n};\n\n// Currently, for MBLD only\nconst sec2time = function(TTTTT) {\n  if (TTTTT === 99999) {\n    return \"Unknown\";\n  }\n  let hour = Math.floor(TTTTT / 3600);\n  TTTTT -= hour * 3600;\n\n  let min = Math.floor(TTTTT / 60);\n  TTTTT -= min * 60;\n\n  let sec = Math.floor(TTTTT);\n\n  if (hour > 0) {\n    return hour + \":\" + zfill(min, 2) + zfill(sec, 2);\n  }\n\n  return min + \":\" + zfill(sec, 2);\n};\n\n/**\n *\n * @param {*} result\n * @param {*} wcaEvent\n * @param {*} type is either single or average\n * @param {*} spec is best (if PR), national_rank, continent_rank, world_rank\n */\nconst timeConverter = function(result, wcaEvent, type) {\n  if (wcaEvent === \"333fm\" && type === \"single\") {\n    return result;\n  }\n\n  if (wcaEvent === \"333mbf\" && type === \"single\") {\n    // https://www.worldcubeassociation.org/results/misc/export.html\n\n    result += \"\";\n\n    let DD = Number(result.substring(0, 2));\n    let TTTTT = Number(result.substring(2, 2 + 5));\n    let MM = Number(result.substring(7, 7 + 2));\n\n    let difference = 99 - DD;\n    let timeInSeconds = sec2time(TTTTT);\n    let missed = MM;\n    let solved = difference + missed;\n    let attempted = solved + missed;\n    return solved + \"/\" + attempted + \" [\" + timeInSeconds + \"]\";\n  }\n\n  return mills2time(result);\n};\n\nexport default timeConverter;\n","import React, { Component } from \"react\";\nimport \"./Card.css\";\nimport { getName } from \"../functions/wcaUtils\";\nimport timeConverter from \"../functions/timeUtils\";\nimport Flag from \"react-country-flag\";\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCompetitorInfo = props.getCompetitorInfo;\n    this.getStatus = props.getStatus;\n\n    this.toShow = props.toShow;\n    this.getGeneralItemsFiltered = props.getGeneralItemsFiltered;\n    this.getTotalItemsToShow = props.getTotalItemsToShow;\n\n    this.getSpecName = props.getSpecName;\n\n    this.getStatus = props.getStatus;\n    this.statusEnum = props.statusEnum;\n  }\n\n  // Map properties to show in the json in depth\n  // This is a helper function that says: hey, you are looking for totalRecods? I'll show you where it is.\n  medals = [\"gold\", \"silver\", \"bronze\"];\n  records = [\"world\", \"continental\", \"national\"];\n  findResult = (item, type, spec) => {\n    let competitor = this.getCompetitorInfo();\n\n    if (item === \"competitions\") return competitor.competition_count;\n\n    // Gold, silver or bronze\n    if (this.medals.indexOf(item) >= 0) return competitor.medals[item];\n    if (item === \"totalMedals\") return competitor.medals.total;\n\n    if (this.records.indexOf(item) >= 0) return competitor.records.item;\n    if (item === \"totalRecords\") return competitor.records.total;\n\n    // This will render eigher PR single or average\n    if (\"best\" === spec) {\n      if (\n        !competitor.personal_records[item] ||\n        !competitor.personal_records[item][type] ||\n        !competitor.personal_records[item][type][spec]\n      ) {\n        return \"-\";\n      }\n\n      let wcaEvent = item;\n\n      return timeConverter(\n        competitor.personal_records[wcaEvent][type][spec],\n        wcaEvent,\n        type\n      );\n    }\n\n    // NR, CR or WR - rank.\n    return competitor.personal_records[item][type][spec];\n  };\n\n  render() {\n    let status = this.getStatus();\n\n    if (status === this.statusEnum.LOADING) {\n      return (\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      );\n    }\n\n    if (status === this.statusEnum.ERROR) {\n      return <div>Error</div>;\n    }\n\n    if (status === this.statusEnum.LOADED) {\n      let competitorInfo = this.props.competitorInfo;\n\n      let availableWidth = window.innerWidth;\n      let cardWidth = Math.min(400, availableWidth);\n      let cardHeight = Math.floor(cardWidth * 1.5);\n\n      let competitorNameHeight = Math.floor(cardHeight / 10);\n      let avatarHeight = Math.floor(cardHeight / 3);\n\n      let generalItemToShow = this.getGeneralItemsFiltered();\n      let toShow = this.props.toShow;\n\n      let itemRowHeight = Math.floor(\n        (cardHeight - competitorNameHeight - avatarHeight) /\n          this.getTotalItemsToShow()\n      );\n\n      return (\n        <div\n          id=\"card-base\"\n          className=\"container\"\n          style={{\n            width: cardWidth,\n            height: cardHeight,\n            paddingLeft: 0,\n            paddingRight: 0\n          }}\n        >\n          <div id=\"card\" style={{ height: cardHeight }}>\n            <div\n              id=\"competitor-name\"\n              style={{ height: competitorNameHeight, width: cardWidth }}\n            >\n              <h4>{competitorInfo.person.name}</h4>\n            </div>\n\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-2\"></div>\n                <div className=\"col-8\">\n                  <img\n                    className=\"avatar\"\n                    src={competitorInfo.person.avatar.url}\n                    alt=\"Competitor avatar.\"\n                    style={{ height: avatarHeight }}\n                  ></img>\n                </div>\n                <div className=\"col-2\">\n                  <Flag code={competitorInfo.person.country_iso2} />\n                </div>\n              </div>\n            </div>\n\n            <div id=\"div-table-card\">\n              <table className=\"table table-sm\">\n                <tbody>\n                  {generalItemToShow.map(stat => (\n                    <tr key={stat.id} style={{ height: itemRowHeight }}>\n                      <td className=\"align-middle\">{stat.name}</td>\n                      <td className=\"align-middle\">\n                        {this.findResult(stat.id)}\n                      </td>\n                    </tr>\n                  ))}\n\n                  {toShow.map(event => (\n                    <tr\n                      key={event.id + \"-\" + event.type + \"-\" + event.spec}\n                      style={{ height: itemRowHeight }}\n                    >\n                      <td className=\"capitalize align-middle\">\n                        {getName(event.id) +\n                          \" \" +\n                          event.type +\n                          \" \" +\n                          this.getSpecName(event.spec)}\n                      </td>\n                      <td className=\"align-middle\">\n                        {this.findResult(event.id, event.type, event.spec)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    // init\n    return <span></span>;\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./Input.css\";\nimport { wcaEvents, getName } from \"../functions/wcaUtils\";\n\nclass Input extends Component {\n  constructor(props) {\n    super(props);\n\n    this.isToShow = props.isToShow;\n    this.toogleToShow = props.toogleToShow;\n\n    this.toogleShowGeneralItem = props.toogleShowGeneralItem;\n\n    let state = { wcaId: \"\" };\n    this.state = state;\n\n    this.searchCompetitor = props.searchCompetitor;\n\n    this.types = props.types;\n    this.specs = props.specs;\n\n    this.getStatus = props.getStatus;\n    this.statusEnum = props.statusEnum;\n    this.getTotalItemsToShow = props.getTotalItemsToShow;\n    this.getMaxItemsToShow = props.getMaxItemsToShow;\n  }\n\n  handleCompetitorChange = event => {\n    let wcaId = event.target.value.toUpperCase();\n    this.setState({ wcaId: wcaId });\n    this.searchCompetitor(wcaId);\n  };\n\n  // WCA json is fetched with\n  // spec\n  // best -> PR\n  // NR, CR, WR for rankings\n  toogleSelectedEvent = ev => {\n    // Vanilla javascript to help in getting the value assigned\n    // For value, we assign like: 333-single, 333-average...\n    let source = ev.target.getAttribute(\"id\").split(\"-\");\n    let wcaEvent = source[0];\n    let type = source[1];\n    let spec = source[2];\n\n    this.toogleToShow(wcaEvent, type, spec);\n  };\n\n  toogleGeneralItem = ev => {\n    let source = ev.target.getAttribute(\"value\");\n\n    this.toogleShowGeneralItem(source);\n  };\n\n  handleDownload = () => {\n    // This is here just for sanity.\n    // Download is handled with a <script> inside index.html\n  };\n\n  // The download button is hidden until it's working.\n  // For some reason, the avatar is not downloaded and it's not centered.\n  render() {\n    return (\n      <div id=\"input-base\" className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleCompetitorChange}\n              maxLength=\"10\"\n              id=\"wca-id-input\"\n              placeholder=\"Select a Competitor\"\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div>\n              <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                data-toggle=\"collapse\"\n                data-target=\"#collapse-items\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapse-items\"\n              >\n                General items\n              </button>\n              <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                data-toggle=\"collapse\"\n                data-target=\"#collapse-events\"\n                aria-expanded=\"false\"\n                aria-controls=\"collapse-events\"\n              >\n                Events\n              </button>\n              <button\n                className=\"btn btn-primary\"\n                type=\"button\"\n                onClick={this.handleDownload}\n                id=\"btn-download\"\n                disabled={this.getStatus() !== this.statusEnum.LOADED}\n                title=\"Download the card after it's rendered.\"\n                style={{ display: \"none\" }}\n              >\n                Download\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-12 align-items-center\">\n            <div className=\"collapse\" id=\"collapse-items\">\n              <table className=\"table table-sm table-hover\">\n                <tbody>\n                  {this.props.generalItems.map(event => (\n                    <tr key={event.id}>\n                      <td\n                        onClick={this.toogleGeneralItem}\n                        value={event.id}\n                        className={\n                          event.show ? \"table-dark capitalize\" : \"capitalize\"\n                        }\n                      >\n                        {event.name}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"collapse\" id=\"collapse-events\">\n          <table className=\"table table-sm table-hover\">\n            <thead>\n              <tr>\n                <th></th>\n                {this.types.map(type => (\n                  <th\n                    className=\"capitalize table-title-type\"\n                    colSpan={this.specs.length}\n                    key={type}\n                  >\n                    {type}\n                  </th>\n                ))}\n              </tr>\n              <tr>\n                <th></th>\n                {this.types.map(type => (\n                  <React.Fragment key={type}>\n                    {this.specs.map(spec => (\n                      <th key={spec.id} className=\"capitalize table-title-spec\">\n                        {spec.name}\n                      </th>\n                    ))}\n                  </React.Fragment>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {wcaEvents.map(event => (\n                <tr key={event.id}>\n                  <th>{getName(event.id)}</th>\n                  {event.spec.map(eventSpec => (\n                    <React.Fragment key={eventSpec}>\n                      {this.specs.map(spec => (\n                        <td>\n                          <input\n                            type=\"checkbox\"\n                            id={event.id + \"-\" + eventSpec + \"-\" + spec.id}\n                            key={event.id + \"-\" + eventSpec + \"-\" + spec.id}\n                            onClick={this.toogleSelectedEvent}\n                            disabled={\n                              !this.isToShow(event.id, eventSpec, spec.id) &&\n                              this.getTotalItemsToShow() >=\n                                this.getMaxItemsToShow()\n                            }\n                            checked={\n                              this.isToShow(event.id, eventSpec, spec.id)\n                                ? \"true\"\n                                : \"\"\n                            }\n                          ></input>\n                        </td>\n                      ))}\n                    </React.Fragment>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Input from \"./Input\";\nimport \"./Interface.css\";\nimport { isValidWcaId } from \"../functions/wcaUtils\";\n\nclass Interface extends Component {\n  constructor(props) {\n    super(props);\n\n    this.types = [\"single\", \"average\"];\n\n    this.specs = [\n      { id: \"best\", name: \"best\" },\n      { id: \"country_rank\", name: \"Natioanl Rank\" },\n      { id: \"continent_rank\", name: \"Continental Rank\" },\n      { id: \"world_rank\", name: \"World Rank\" }\n    ];\n\n    let generalItems = [\n      { id: \"competitions\", name: \"Competitions\", show: true },\n      { id: \"gold\", name: \"Golds\", show: true },\n      { id: \"silver\", name: \"Silvers\", show: true },\n      { id: \"bronze\", name: \"Bronzes\", show: true },\n      { id: \"totalMedals\", name: \"Total Medals\", show: false },\n      { id: \"totalRecords\", name: \"Total Records\", show: true }\n    ];\n\n    // Default events to show\n    let toShow = [\n      { id: \"333\", type: \"single\", spec: \"best\" },\n      { id: \"333\", type: \"average\", spec: \"best\" }\n    ];\n\n    let state = {\n      wcaId: \"\",\n      competitorInfo: {},\n      status: null,\n      generalItems: generalItems,\n      toShow: toShow\n    };\n    this.state = state;\n\n    // Hopefully, the view won't get messy if we use this.\n    this.CARD_LIMIT_LINE_NUMBER = 10;\n  }\n\n  /**\n   * Given the id spec, returns its name.\n   * Example: national_rank => NR\n   */\n  getSpecName = specId => {\n    return this.specs.filter(x => x.id === specId)[0].name;\n  };\n\n  statusEnum = { INIT: 0, LOADING: 1, LOADED: 2, ERROR: -1 };\n  // This is about the competitor info.\n  // null: for not fetched\n  // loading\n  // loaded\n  // error\n  getStatus = () => {\n    return this.state.status;\n  };\n\n  toogleShowGeneralItem = item => {\n    let generalItems = this.state.generalItems;\n    generalItems.forEach(x => {\n      if (x.id === item) {\n        let oldFlag = x.show;\n\n        // This will limit the number of lines. It's ok to remove.\n        if (\n          oldFlag ||\n          this.getTotalItemsToShow() < this.CARD_LIMIT_LINE_NUMBER\n        ) {\n          x.show = !x.show;\n        }\n      }\n    });\n    let state = this.state;\n    state.generalItems = generalItems;\n    this.setState(state);\n  };\n\n  // This is for specific events\n  // Eg 333, single, best or 333, single, NR (rank)\n  isToShow = (event, type, spec) => {\n    let result = false;\n    this.state.toShow.forEach(item => {\n      if (item.id === event && item.type === type && item.spec === spec) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  // Actually, this adds or remove events.\n  toogleToShow = (wcaEvent, type, spec) => {\n    let toShow = this.state.toShow;\n    let state = this.state;\n\n    // In case the item is set to show, we remove it\n    if (this.isToShow(wcaEvent, type, spec)) {\n      toShow = toShow.filter(\n        x => x.id !== wcaEvent || x.type !== type || x.spec !== spec\n      );\n    } else {\n      // We do not allow adding events beyong the limit\n      if (this.getTotalItemsToShow() >= this.CARD_LIMIT_LINE_NUMBER) {\n        return;\n      }\n      toShow.push({ id: wcaEvent, type: type, spec: spec });\n    }\n\n    state.toShow = toShow;\n    this.setState(state);\n  };\n\n  searchCompetitor = wcaId => {\n    if (isValidWcaId(wcaId)) {\n      // This allows some feedback to the user.\n      // This information is shown in the card.\n      let state = this.state;\n      state.status = this.statusEnum.LOADING;\n      this.setState(state);\n\n      this.fetchCompetitor(wcaId);\n    }\n  };\n\n  getCompetitorInfo = () => {\n    return this.state.competitorInfo;\n  };\n\n  isLoaded = () => {\n    return this.state.loaded;\n  };\n\n  // Return the general item that will be rendered.\n  // Competitions, medals, specific medals or records.\n  getGeneralItemsFiltered = () => {\n    return this.state.generalItems.filter(x => x.show);\n  };\n\n  // This is the number of lines the card will have.\n  getTotalItemsToShow = () => {\n    return this.state.toShow.length + this.getGeneralItemsFiltered().length;\n  };\n\n  getMaxItemsToShow = () => this.CARD_LIMIT_LINE_NUMBER;\n\n  // Search competitor info in the api\n  baseApiUrl = \"https://www.worldcubeassociation.org/\";\n  personsEndpoint = \"api/v0/persons/\";\n  fetchCompetitor = function(wcaId) {\n    wcaId = wcaId.toUpperCase();\n    let url = this.baseApiUrl + this.personsEndpoint + wcaId;\n\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        result => {\n          let state = this.state;\n          state.competitorInfo = result;\n          state.status = this.statusEnum.LOADED;\n          this.setState(state);\n        },\n        error => {\n          let state = this.state;\n          state.status = this.statusEnum.ERROR;\n          this.setState(state);\n          console.log(error);\n        }\n      );\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"jumbotrom\">\n          <h1 id=\"main-title\">Super Card Cuber</h1>\n        </div>\n        <br />\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Input\n                searchCompetitor={this.searchCompetitor}\n                isToShow={this.isToShow}\n                toogleToShow={this.toogleToShow}\n                generalItems={this.state.generalItems}\n                toogleShowGeneralItem={this.toogleShowGeneralItem}\n                types={this.types}\n                specs={this.specs}\n                getStatus={this.getStatus}\n                statusEnum={this.statusEnum}\n                getTotalItemsToShow={this.getTotalItemsToShow}\n                getMaxItemsToShow={this.getMaxItemsToShow}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12\" align=\"center\">\n              <Card\n                getCompetitorInfo={this.getCompetitorInfo}\n                competitorInfo={this.state.competitorInfo}\n                toShow={this.state.toShow}\n                getGeneralItemsFiltered={this.getGeneralItemsFiltered}\n                getSpecName={this.getSpecName}\n                getTotalItemsToShow={this.getTotalItemsToShow}\n                statusEnum={this.statusEnum}\n                getStatus={this.getStatus}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Interface;\n","import React from \"react\";\nimport \"./App.css\";\nimport Interface from \"./components/Interface\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Interface></Interface>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}